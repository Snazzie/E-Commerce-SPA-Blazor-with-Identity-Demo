@page "/products"
@using Blazor.Shared
@inject HttpClient Http
@inject Blazor.Extensions.Storage.SessionStorage sessionStorage

<style>
    .products-container {
        display: grid;
        grid-template-columns: repeat(auto-fill,220px);
        grid-gap: 20px;
        justify-content: space-evenly;
    }
</style>

<h3>Products</h3>
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="products-container">
        @foreach (var product in products)
        {
            var isInCart = IsInCart(product.Sku);
            CartItemModel cartItem;
            if (isInCart)
            {
                cartItem = cart[product.Sku];
            }
            else
            {
                cartItem = new CartItemModel() { ProductSku = product.Sku };
            }

            <ProductCartItem Product="product" cartItemModel="@cartItem" IsInCart="isInCart" OnClick="@(() => UpdateCart(product.Sku, cartItem.Quantity))" />
        }
    </div>
    <div>
        <div>Page @currentPage / @totalPages</div>

        @if (currentPage > 0)
        {
            <button @onclick="@(() => GetPreviousPage())">Previous</button>
        }
        @if (currentPage < totalPages)
        {
            <button @onclick="@(() => GetNextPage())">Next</button>
        }

    </div>

    <h3>Cart</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Quanitity</th>
                <th>Price</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @{ 
                foreach (var cartItem in cart)
                {
                    var product = cartProducts.Single(s => s.Sku == cartItem.Value.ProductSku);
                    double price = product.Price * cartItem.Value.Quantity;
                <tr>
                    <td>@product.Title</td>
                    <td>@cartItem.Value.Quantity</td>
                    <td>$@price </td>
                    <td><button @onclick="@(e => RemoveFromCart(cartItem.Key))">Remove</button></td>
                </tr>
            }
                }
        </tbody>
    </table>
}
@code {

    ProductModel[] products;
    List<ProductModel> cartProducts = new List<ProductModel>();
    Dictionary<string, CartItemModel> cart = new Dictionary<string, CartItemModel>();
    int currentPage = 1;
    int defaultPageSize = 20;
    int totalPages;
    string cartKey = "cartItems";

    protected override async Task OnInitializedAsync()
    {
        Dictionary<string, CartItemModel> fromSession = await sessionStorage.GetItem<Dictionary<string, CartItemModel>>(cartKey);
        

        totalPages = await Http.GetJsonAsync<int>($"api/Products/TotalPages");
        if (fromSession != null)
            cart = fromSession;
        if(cart.Count() != 0)
        await UpdateCartProducts();

        products = await Http.GetJsonAsync<ProductModel[]>($"api/Products/PaginatedProducts/{currentPage}");

    }

    private async Task GetNextPage()
    {
        currentPage++;
        products = await Http.GetJsonAsync<ProductModel[]>($"api/Products/PaginatedProducts/{currentPage}");
    }
    private async Task GetPreviousPage()
    {
        if(currentPage > 1)
            currentPage--;
        products = await Http.GetJsonAsync<ProductModel[]>($"api/Products/PaginatedProducts/{currentPage}");
    }

    private bool IsInCart(string sku)
    {
        return cart.ContainsKey(sku);
    }

    public async void UpdateCart(string sku, int quantity)
    {
        if (quantity > 0)
        {
            if (!IsInCart(sku))
            {
                var product = products.First(p => p.Sku == sku);
                AddToCart(sku, new CartItemModel() { ProductSku = sku, Quantity = quantity });
            }
            else
            {
                cart[sku].Quantity = quantity;
            }
        }
        else
        {
            RemoveFromCart(sku);
        }

        await sessionStorage.SetItem<Dictionary<string, CartItemModel>>(cartKey, cart);
        await UpdateCartProducts();

        base.StateHasChanged();
    }

    private void AddToCart(string sku, CartItemModel cartitemModel)
    {

        if (!cart.ContainsKey(sku))
            cart.Add(sku, cartitemModel);
    }

    private async Task UpdateCartProducts()
    {
        cartProducts = await Http.GetJsonAsync<List<ProductModel>>($"api/Products/GetProducts?skus={String.Join("&skus=",cart.Select(s => s.Value.ProductSku).ToList())}");
    }

    private void RemoveFromCart(string sku)
    {
        if (cart.ContainsKey(sku))
            cart.Remove(sku);
    }


}
