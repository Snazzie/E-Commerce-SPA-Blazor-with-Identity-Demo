@page "/products"
@using Blazor.Shared
@inject HttpClient Http
@inject Blazor.Extensions.Storage.SessionStorage sessionStorage



<style>
    .products-container {
        display: grid;
        grid-template-columns: repeat(auto-fill,220px);
        padding: 10px;
        justify-content: space-evenly;
    }
</style>
<h3>Products</h3>
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="products-container">
        @foreach (var product in products)
        {
            var isInCart = IsInCart(product.Sku);
            CartItemModel cartItem;
            if (isInCart)
            {
                cartItem = cart[product.Sku];
            }
            else
            {
                cartItem = new CartItemModel() { ProductSku = product.Sku };
            }

            <ProductCartItem Product="product" cartItemModel="@cartItem" IsInCart="isInCart" OnClick="@(() => UpdateCart(product.Sku, cartItem.Quantity))" />
        }
    </div>

    <h3>Cart</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Quanitity</th>
                <th>Price</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cartItem in cart)
            {
                var product = products.Single(s => s.Sku == cartItem.Key);
                double price = product.Price * cartItem.Value.Quantity;
                <tr>
                    <td>@product.Title</td>
                    <td>@cartItem.Value.Quantity</td>
                    <td>$@price </td>
                    <td><button @onclick="@(e => RemoveFromCart(cartItem.Key))">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {

    List<ProductModel> cartItems;
    ProductModel[] products;
    Dictionary<string, CartItemModel> cart = new Dictionary<string, CartItemModel>();

    string cartKey = "cartItems";

    protected override async Task OnInitializedAsync()
    {


        Dictionary<string, CartItemModel> fromSession = await sessionStorage.GetItem<Dictionary<string, CartItemModel>>(cartKey);

        if (fromSession != null)
            cart = fromSession;


        products = await Http.GetJsonAsync<ProductModel[]>("api/Products/Products");

    }

    private bool IsInCart(string sku)
    {
        return cart.ContainsKey(sku);
    }

    public async void UpdateCart(string sku, int quantity)
    {
        if (quantity > 0)
        {
            if (!IsInCart(sku))
            {
                var product = products.First(p => p.Sku == sku);
                AddToCart(sku, new CartItemModel() { ProductSku = sku, Quantity = quantity });
            }
            else
            {
                cart[sku].Quantity = quantity;
            }
        }
        else
        {
            RemoveFromCart(sku);
        }

        await sessionStorage.SetItem<Dictionary<string, CartItemModel>>(cartKey, cart);

        base.StateHasChanged();
    }
    private void AddToCart(string sku, CartItemModel cartitemModel)
    {

        if (!cart.ContainsKey(sku))
            cart.Add(sku, cartitemModel);


        base.StateHasChanged();
    }

    private void RemoveFromCart(string sku)
    {
        if (cart.ContainsKey(sku))
            cart.Remove(sku);
    }


}
