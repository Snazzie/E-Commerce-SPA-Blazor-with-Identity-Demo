@using Blazor.Shared
@inject HttpClient Http
@inject ICartService CartService
@inject IApiUsageService ApiUsageService
@inject IEventService EventService

@if (products == null)
{
    <Spinner />
}
else
{
    <style>
        .products-container {
            display: grid;
            grid-template-columns: repeat(auto-fill,220px);
            grid-gap: 20px;
            justify-content: space-evenly;
        }
    </style>

    <h3>Products</h3>
    <div class="products-container">
        @foreach (var product in products)
        {
            var isInCart = CartService.CartContains(product.Sku);
            CartItemModel cartItem;
            if (isInCart)
            {
                cartItem = CartService.Cart[product.Sku];
            }
            else
            {
                cartItem = new CartItemModel() { ProductSku = product.Sku };
            }

            <ProductCartItem Product="product" cartItemModel="@cartItem" IsInCart="isInCart" OnClick="@(async () => await CartService.UpdateCart(product.Sku, cartItem.Quantity))" />
        }
    </div>
    <div>
        <div>Page @currentPage / @totalPages</div>

        @if (currentPage > 1)
        {
            <button @onclick="@(() => GetPreviousPage())">Previous</button>
        }
        @if (currentPage < totalPages)
        {
            <button @onclick="@(() => GetNextPage())">Next</button>
        }

    </div>


}
@code {

    ProductModel[] products;
    int currentPage = 1;
    int defaultPageSize = 20;
    int totalPages;

    protected override async Task OnInitializedAsync()
    {
        EventService.CartUpdated += StateHasChanged;

        totalPages = await ApiUsageService.TotalPages();
        await CartService.Initialize();
        var result = await ApiUsageService.PaginatedProducts(currentPage);
        products = result.ToArray();
    }

    private async Task GetNextPage()
    {
        currentPage++;
        products = await ApiUsageService.PaginatedProducts(currentPage);
    }

    private async Task GetPreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
        products = await ApiUsageService.PaginatedProducts(currentPage);
    }
}
