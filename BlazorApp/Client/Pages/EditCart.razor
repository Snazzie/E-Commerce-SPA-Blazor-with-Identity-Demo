@page "/EditCart"
@inject ICartService CartService
@inject IEventService EventService

@inject NavigationManager NavigationManager
<h3>Cart</h3>

@if (CartService.EditableCart.Count == 0)
{
    <h5>There are no items in your cart.</h5>
}
else
{
    <style>
        .cartContainer {
            padding: 0px 40px 0px 40px;
        }

        hr {
            border-top: 5px solid rgba(0,0,0,.1);
        }
    </style>

    <div class="cartContainer">
        <table class="table">
            <thead>
                <tr>
                    <th>Item</th>
                    <th>Quanitity</th>
                    <th>Price</th>
                    <th>Options</th>
                </tr>
            </thead>
            <tbody>
                @{
                    foreach (var cartItem in CartService.EditableCart)
                    {
                        var product = CartService.CartProducts.Single(s => s.Sku == cartItem.Value.ProductSku);
                        var newPrice = product.Price * cartItem.Value.Quantity;
                        var staticPrice = product.Price * CartService.GetItemQuantityInCart(cartItem.Value.ProductSku);

                        <tr>
                            <td>@product.Title</td>
                            <td>
                                <EditForm Model="cartItem" OnSubmit="(async () => await CartService.UpdateCart(cartItem.Value.ProductSku, cartItem.Value.Quantity))">
                                    <InputNumber min="0" @bind-Value="@cartItem.Value.Quantity" />
                                    <button type="submit">Update</button>
                                </EditForm>
                            </td>

                            @{
                                if (newPrice != staticPrice)
                                {
                                    <td><s>$@staticPrice</s> => $@newPrice</td>
                                }
                                else
                                {
                                    <td>$@staticPrice</td>
                                }
                            }

                            <td><button @onclick="@(async () => await CartService.UpdateCart(cartItem.Value.ProductSku, 0))">Remove</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <hr />
        <div style="float:right">
            @{
                <b>Subtotal (@CartService.GetTotalItemsCountInCart() items): $@CartService.CalculateCost()</b>
                <br />
                @if (ShowCheckoutButton)
                {
                    <button @onclick="@(() => NavigationManager.NavigateTo("checkout"))">Checkout</button>
                }
            }

        </div>
    </div>
}

@code{
    [Parameter]
    public bool ShowCheckoutButton { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {

    }

}